public class N26SalesforceLimits {
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.
	public class ActiveScratchOrgs {
		public Integer Max {get;set;} 
		public Integer Remaining {get;set;} 

		public ActiveScratchOrgs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Max') {
							Max = parser.getIntegerValue();
						} else if (text == 'Remaining') {
							Remaining = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'ActiveScratchOrgs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DailyApiRequests {
		public Integer Max {get;set;} 
		public Integer Remaining {get;set;} 
		public ActiveScratchOrgs AntMigrationTool {get;set;} 
		public ActiveScratchOrgs DataloaderBulk {get;set;} 
		public ActiveScratchOrgs DataloaderPartner {get;set;} 
		public ActiveScratchOrgs Force_comIDE {get;set;} // in json: Force.com IDE
		public ActiveScratchOrgs SalesforceMobileDashboards {get;set;} 
		public ActiveScratchOrgs SalesforceTouch {get;set;} 
		public ActiveScratchOrgs SalesforceforOutlook {get;set;} 
		public ActiveScratchOrgs SalesforceDXNamespaceRegistry {get;set;} 
		public ActiveScratchOrgs Workbench {get;set;} 
		public ActiveScratchOrgs sfdxtravisci {get;set;} 

		public DailyApiRequests(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Max') {
							Max = parser.getIntegerValue();
						} else if (text == 'Remaining') {
							Remaining = parser.getIntegerValue();
						} else if (text == 'Ant Migration Tool') {
							AntMigrationTool = new ActiveScratchOrgs(parser);
						} else if (text == 'Dataloader Bulk') {
							DataloaderBulk = new ActiveScratchOrgs(parser);
						} else if (text == 'Dataloader Partner') {
							DataloaderPartner = new ActiveScratchOrgs(parser);
						} else if (text == 'Force.com IDE') {
							Force_comIDE = new ActiveScratchOrgs(parser);
						} else if (text == 'Salesforce Mobile Dashboards') {
							SalesforceMobileDashboards = new ActiveScratchOrgs(parser);
						} else if (text == 'Salesforce Touch') {
							SalesforceTouch = new ActiveScratchOrgs(parser);
						} else if (text == 'Salesforce for Outlook') {
							SalesforceforOutlook = new ActiveScratchOrgs(parser);
						} else if (text == 'SalesforceDX Namespace Registry') {
							SalesforceDXNamespaceRegistry = new ActiveScratchOrgs(parser);
						} else if (text == 'Workbench') {
							Workbench = new ActiveScratchOrgs(parser);
						} else if (text == 'sfdx travis ci') {
							sfdxtravisci = new ActiveScratchOrgs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DailyApiRequests consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public ActiveScratchOrgs ActiveScratchOrgs {get;set;} 
	public ActiveScratchOrgs ConcurrentAsyncGetReportInstances {get;set;} 
	public ActiveScratchOrgs ConcurrentSyncReportRuns {get;set;} 
	public ActiveScratchOrgs DailyAnalyticsDataflowJobExecutions {get;set;} 
	public DailyApiRequests DailyApiRequests {get;set;} 
	public ActiveScratchOrgs DailyAsyncApexExecutions {get;set;} 
	public DailyApiRequests DailyBulkApiRequests {get;set;} 
	public ActiveScratchOrgs DailyDurableGenericStreamingApiEvents {get;set;} 
	public ActiveScratchOrgs DailyDurableStreamingApiEvents {get;set;} 
	public DailyApiRequests DailyGenericStreamingApiEvents {get;set;} 
	public ActiveScratchOrgs DailyScratchOrgs {get;set;} 
	public ActiveScratchOrgs DailyStandardVolumePlatformEvents {get;set;} 
	public DailyApiRequests DailyStreamingApiEvents {get;set;} 
	public ActiveScratchOrgs DailyWorkflowEmails {get;set;} 
	public ActiveScratchOrgs DataStorageMB {get;set;} 
	public ActiveScratchOrgs DurableStreamingApiConcurrentClients {get;set;} 
	public ActiveScratchOrgs FileStorageMB {get;set;} 
	public ActiveScratchOrgs HourlyAsyncReportRuns {get;set;} 
	public ActiveScratchOrgs HourlyDashboardRefreshes {get;set;} 
	public ActiveScratchOrgs HourlyDashboardResults {get;set;} 
	public ActiveScratchOrgs HourlyDashboardStatuses {get;set;} 
	public ActiveScratchOrgs HourlyLongTermIdMapping {get;set;} 
	public ActiveScratchOrgs HourlyODataCallout {get;set;} 
	public ActiveScratchOrgs HourlyShortTermIdMapping {get;set;} 
	public ActiveScratchOrgs HourlySyncReportRuns {get;set;} 
	public ActiveScratchOrgs HourlyTimeBasedWorkflow {get;set;} 
	public ActiveScratchOrgs MassEmail {get;set;} 
	public ActiveScratchOrgs MonthlyPlatformEvents {get;set;} 
	public ActiveScratchOrgs Package2VersionCreates {get;set;} 
	public PermissionSets PermissionSets {get;set;} 
	public ActiveScratchOrgs SingleEmail {get;set;} 
	public ActiveScratchOrgs StreamingApiConcurrentClients {get;set;} 

	public N26SalesforceLimits(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'ActiveScratchOrgs') {
						ActiveScratchOrgs = new ActiveScratchOrgs(parser);
					} else if (text == 'ConcurrentAsyncGetReportInstances') {
						ConcurrentAsyncGetReportInstances = new ActiveScratchOrgs(parser);
					} else if (text == 'ConcurrentSyncReportRuns') {
						ConcurrentSyncReportRuns = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyAnalyticsDataflowJobExecutions') {
						DailyAnalyticsDataflowJobExecutions = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyApiRequests') {
						DailyApiRequests = new DailyApiRequests(parser);
					} else if (text == 'DailyAsyncApexExecutions') {
						DailyAsyncApexExecutions = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyBulkApiRequests') {
						DailyBulkApiRequests = new DailyApiRequests(parser);
					} else if (text == 'DailyDurableGenericStreamingApiEvents') {
						DailyDurableGenericStreamingApiEvents = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyDurableStreamingApiEvents') {
						DailyDurableStreamingApiEvents = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyGenericStreamingApiEvents') {
						DailyGenericStreamingApiEvents = new DailyApiRequests(parser);
					} else if (text == 'DailyScratchOrgs') {
						DailyScratchOrgs = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyStandardVolumePlatformEvents') {
						DailyStandardVolumePlatformEvents = new ActiveScratchOrgs(parser);
					} else if (text == 'DailyStreamingApiEvents') {
						DailyStreamingApiEvents = new DailyApiRequests(parser);
					} else if (text == 'DailyWorkflowEmails') {
						DailyWorkflowEmails = new ActiveScratchOrgs(parser);
					} else if (text == 'DataStorageMB') {
						DataStorageMB = new ActiveScratchOrgs(parser);
					} else if (text == 'DurableStreamingApiConcurrentClients') {
						DurableStreamingApiConcurrentClients = new ActiveScratchOrgs(parser);
					} else if (text == 'FileStorageMB') {
						FileStorageMB = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyAsyncReportRuns') {
						HourlyAsyncReportRuns = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyDashboardRefreshes') {
						HourlyDashboardRefreshes = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyDashboardResults') {
						HourlyDashboardResults = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyDashboardStatuses') {
						HourlyDashboardStatuses = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyLongTermIdMapping') {
						HourlyLongTermIdMapping = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyODataCallout') {
						HourlyODataCallout = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyShortTermIdMapping') {
						HourlyShortTermIdMapping = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlySyncReportRuns') {
						HourlySyncReportRuns = new ActiveScratchOrgs(parser);
					} else if (text == 'HourlyTimeBasedWorkflow') {
						HourlyTimeBasedWorkflow = new ActiveScratchOrgs(parser);
					} else if (text == 'MassEmail') {
						MassEmail = new ActiveScratchOrgs(parser);
					} else if (text == 'MonthlyPlatformEvents') {
						MonthlyPlatformEvents = new ActiveScratchOrgs(parser);
					} else if (text == 'Package2VersionCreates') {
						Package2VersionCreates = new ActiveScratchOrgs(parser);
					} else if (text == 'PermissionSets') {
						PermissionSets = new PermissionSets(parser);
					} else if (text == 'SingleEmail') {
						SingleEmail = new ActiveScratchOrgs(parser);
					} else if (text == 'StreamingApiConcurrentClients') {
						StreamingApiConcurrentClients = new ActiveScratchOrgs(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'N26SalesforceLimits consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class PermissionSets {
		public Integer Max {get;set;} 
		public Integer Remaining {get;set;} 
		public ActiveScratchOrgs CreateCustom {get;set;} 

		public PermissionSets(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Max') {
							Max = parser.getIntegerValue();
						} else if (text == 'Remaining') {
							Remaining = parser.getIntegerValue();
						} else if (text == 'CreateCustom') {
							CreateCustom = new ActiveScratchOrgs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PermissionSets consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static N26SalesforceLimits parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new N26SalesforceLimits(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

}